import discord
from discord.ext import commands
import aiohttp
import asyncio
from datetime import datetime
from urllib.parse import unquote
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = ''  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

def format_number(num):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–∞ —Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è–º–∏ K –∏ M"""
    if num >= 1_000_000:
        return f"{num / 1_000_000:.0f}M" if num % 1_000_000 == 0 else f"{num / 1_000_000:.1f}M"
    elif num >= 1_000:
        return f"{num / 1_000:.0f}K" if num % 1_000 == 0 else f"{num / 1_000:.1f}K"
    else:
        return str(num)

def format_timestamp(timestamp):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    dt = datetime.fromtimestamp(timestamp / 1000)
    return dt.strftime('%d.%m, %H:%M:%S')

def extract_rune_id(input_text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç runeId –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    # –ï—Å–ª–∏ —ç—Ç–æ URL
    if 'app.radfi.co/virtual-mint/' in input_text:
        try:
            start = input_text.find('virtual-mint/') + 13
            end = input_text.find('?', start) if '?' in input_text[start:] else len(input_text)
            return unquote(input_text[start:end])
        except:
            return None
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–æ–π ID –≤–∏–¥–∞ 911957:2229
    if ':' in input_text and input_text.replace(':', '').replace('%3A', '').isdigit():
        return unquote(input_text)
    
    return None

def format_number(num):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–∞ —Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è–º–∏ K –∏ M"""
    if num >= 1_000_000:
        return f"{num / 1_000_000:.0f}M" if num % 1_000_000 == 0 else f"{num / 1_000_000:.1f}M"
    elif num >= 1_000:
        return f"{num / 1_000:.0f}K" if num % 1_000 == 0 else f"{num / 1_000:.1f}K"
    else:
        return str(num)
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    dt = datetime.fromtimestamp(timestamp / 1000)
    return dt.strftime('%d.%m, %H:%M:%S')

async def get_all_unconfirmed_mints(rune_id, limit=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –í–°–ï –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞"""
    try:
        from urllib.parse import quote
        encoded_rune_id = quote(rune_id)
        all_mints = []
        page = 1
        total_pages = 1
        
        print(f"üîç –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è {rune_id}...")
        if limit:
            print(f"üìä –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {limit} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        async with aiohttp.ClientSession() as session:
            while page <= total_pages and (not limit or len(all_mints) < limit):
                url = f"https://api.radfi.org/api/vm-transactions?page={page}&pageSize=100&sort=-timestamp&state_eq=allInMempool&runeId_eq={encoded_rune_id}"
                
                print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}/{total_pages}...")
                
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        if data.get('code') == "1":
                            mints = data.get('data', [])
                            meta_data = data.get('metaData', {})
                            
                            if page == 1:
                                total_pages = meta_data.get('totalPages', 1)
                                total_items = meta_data.get('totalItems', 0)
                                actual_limit = min(limit, total_items) if limit else total_items
                                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {total_items} –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞—é {actual_limit}")
                            
                            # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏–º–∏—Ç, –æ–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                            if limit and len(all_mints) + len(mints) > limit:
                                remaining = limit - len(all_mints)
                                mints = mints[:remaining]
                            
                            all_mints.extend(mints)
                            page += 1
                            
                            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                            if limit and len(all_mints) >= limit:
                                break
                                
                            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                            if page <= total_pages:
                                await asyncio.sleep(0.1)
                        else:
                            break
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status}")
                        break
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_mints)} –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        return {
            'data': all_mints,
            'total_count': len(all_mints)
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def split_message(text, max_length=1900):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"""
    if len(text) <= max_length:
        return [text]
    
    chunks = []
    current_chunk = ''
    lines = text.split('\n')
    
    for line in lines:
        if len(current_chunk) + len(line) + 1 > max_length:
            if current_chunk.strip():
                chunks.append(current_chunk.strip())
            current_chunk = line + '\n'
        else:
            current_chunk += line + '\n'
    
    if current_chunk.strip():
        chunks.append(current_chunk.strip())
    
    return chunks

@bot.event
async def on_ready():
    print(f'‚úÖ –ë–æ—Ç {bot.user.name} –∑–∞–ø—É—â–µ–Ω!')
    print('üü° –ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –í–°–ï –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
    print('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:')
    print('!unconfirmed <runeId> [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - –°–ø–∏—Å–æ–∫ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π')
    print('!prices <runeId> - –û–±—ä—ë–º—ã –ø–æ —Ü–µ–Ω–∞–º')
    print('!minthelp - –ü–æ–º–æ—â—å')

@bot.command(name='unconfirmed')
async def unconfirmed_command(ctx, *, args: str = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ–Ω—Ü–µ."""
    if not args:
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ runeId –∏–ª–∏ —Å—Å—ã–ª–∫—É. –ü—Ä–∏–º–µ—Ä: `!unconfirmed 911957:2229` –∏–ª–∏ `!unconfirmed 911957:2229 10`')
        return
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parts = args.strip().split()
    input_text = parts[0]
    limit = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if len(parts) > 1:
        try:
            limit = int(parts[-1])  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –∫–∞–∫ —á–∏—Å–ª–æ
            if limit <= 0:
                await ctx.reply('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!')
                return
            # –ï—Å–ª–∏ —á–∏—Å–ª–æ –≤–∞–ª–∏–¥–Ω–æ–µ, —É–±–∏—Ä–∞–µ–º –µ–≥–æ –∏–∑ input_text
            input_text = ' '.join(parts[:-1])
        except ValueError:
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —á–∏—Å–ª–æ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ª–∏–º–∏—Ç–∞ –Ω–µ—Ç
            input_text = args.strip()
    
    rune_id = extract_rune_id(input_text)
    
    if not rune_id:
        await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å runeId. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n- `911957:2229`\n- `https://app.radfi.co/virtual-mint/911957:2229`')
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
    if limit:
        loading_message = await ctx.reply(f'üîç –°–æ–±–∏—Ä–∞—é {limit} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...')
    else:
        loading_message = await ctx.reply('üîç –°–æ–±–∏—Ä–∞—é –í–°–ï –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...')
    
    result = await get_all_unconfirmed_mints(rune_id, limit)
    
    if not result:
        await loading_message.edit(content='‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å runeId.')
        return
    
    all_mints = result['data']
    total_count = result['total_count']
    
    if not all_mints:
        await loading_message.edit(content='‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ù–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ - –≤—Å–µ –º–∏–Ω—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã.')
        return
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    if limit:
        response = f"**üü° {total_count} –ü–û–°–õ–ï–î–ù–ò–• –ù–ï–ü–û–î–¢–í–ï–†–ñ–î–Å–ù–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {rune_id}**\n"
    else:
        response = f"**üü° –í–°–ï –ù–ï–ü–û–î–¢–í–ï–†–ñ–î–Å–ù–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {rune_id}**\n"
    response += f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ: **{total_count}** –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
    response += f"‚è∞ –î–∞–Ω–Ω—ã–µ –Ω–∞: {format_timestamp(datetime.now().timestamp() * 1000)}\n\n"
    
    total_sats = 0
    total_tokens = 0
    
    for index, mint in enumerate(all_mints):
        # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö (smallest unit)
        # –î–ª—è Runes –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ 10,000 —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
        mempool_count_raw = mint.get('requestsInMempoolCount', 0)
        sats_amount = mint.get('satsNewRequests', 0)
        
        # –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ (API –¥–∞—ë—Ç –≤ –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö)
        real_tokens = mempool_count_raw * 10000
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Ü–µ–Ω—ã –∑–∞ —Ç–æ–∫–µ–Ω –≤ —Å–∞—Ç–æ—à–∏
        sats_per_token = sats_amount / real_tokens if real_tokens > 0 else 0
        
        total_sats += sats_amount
        total_tokens += real_tokens
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–µ–∑ —Å—Å—ã–ª–æ–∫
        response += f"**{index + 1}.** {format_timestamp(mint.get('timestamp', 0))} | {format_number(real_tokens)} —Ç–æ–∫–µ–Ω–æ–≤ | {sats_per_token:.3f} sats\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    avg_sats_per_token = total_sats / total_tokens if total_tokens > 0 else 0
    response += f"\n**üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
    response += f"üíé –¢–æ–∫–µ–Ω–æ–≤: {format_number(total_tokens)} | üí∞ –°—É–º–º–∞: {total_sats:,} sats | üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_sats_per_token:.3f} sats\n"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    chunks = split_message(response)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await loading_message.edit(content=chunks[0])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
    for chunk in chunks[1:]:
        await ctx.send(chunk)
        await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

@bot.command(name='prices')
async def prices_command(ctx, *, args: str = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä—ë–º—ã –ø–æ —Ü–µ–Ω–∞–º –¥–ª—è –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    if not args:
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ runeId –∏–ª–∏ —Å—Å—ã–ª–∫—É. –ü—Ä–∏–º–µ—Ä: `!prices 911957:2229`')
        return
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–æ–º–∞–Ω–¥–µ unconfirmed)
    parts = args.strip().split()
    input_text = parts[0]
    
    rune_id = extract_rune_id(input_text)
    
    if not rune_id:
        await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å runeId. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n- `911957:2229`\n- `https://app.radfi.co/virtual-mint/911957:2229`')
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
    loading_message = await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ü–µ–Ω—ã –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...')
    
    result = await get_all_unconfirmed_mints(rune_id, None)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    
    if not result:
        await loading_message.edit(content='‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å runeId.')
        return
    
    all_mints = result['data']
    
    if not all_mints:
        await loading_message.edit(content='‚úÖ –ù–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.')
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–∞–º
    price_groups = {}
    
    for mint in all_mints:
        mempool_count_raw = mint.get('requestsInMempoolCount', 0)
        sats_amount = mint.get('satsNewRequests', 0)
        
        # –î–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ü–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        real_tokens = mempool_count_raw * 10000
        sats_per_token = sats_amount / real_tokens if real_tokens > 0 else 0
        
        # –û–∫—Ä—É–≥–ª—è–µ–º —Ü–µ–Ω—É –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        price_key = round(sats_per_token, 3)
        
        # –ù–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–µ–ª–∏–º –Ω–∞ 10000)
        display_tokens = mempool_count_raw
        
        if price_key in price_groups:
            price_groups[price_key] += display_tokens
        else:
            price_groups[price_key] = display_tokens
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    sorted_prices = sorted(price_groups.items(), key=lambda x: x[0], reverse=True)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    response = f"**üí∞ –û–ë–™–Å–ú–´ –ü–û –¶–ï–ù–ê–ú –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {rune_id}**\n"
    response += f"‚è∞ –î–∞–Ω–Ω—ã–µ –Ω–∞: {format_timestamp(datetime.now().timestamp() * 1000)}\n\n"
    
    total_tokens = 0
    
    for price, tokens in sorted_prices:
        total_tokens += tokens
        response += f"**{price:.3f} sats** ‚Üí {format_number(tokens)}\n"
    
    response += f"\n**üìà –ò–¢–û–ì–û:**\n"
    response += f"üíé –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {format_number(total_tokens)}\n"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    chunks = split_message(response)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await loading_message.edit(content=chunks[0])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
    for chunk in chunks[1:]:
        await ctx.send(chunk)
        await asyncio.sleep(0.5)
async def minthelp_command(ctx):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    embed = discord.Embed(
        title="ü§ñ RadFi Unconfirmed Mint Tracker",
        color=0xffaa00
    )
    
    embed.add_field(
        name="!unconfirmed <runeId/url> [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]",
        value="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ `!unconfirmed 911957:2229` - –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n‚Ä¢ `!unconfirmed 911957:2229 10` - —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö",
        inline=False
    )
    
    embed.add_field(
        name="!minthelp",
        value="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏",
        inline=False
    )
    
    embed.add_field(
        name="üü° –ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–æ–º–∞–Ω–¥—ã:",
        value="‚Ä¢ **!unconfirmed** - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n‚Ä¢ **!prices** - –æ–±—ä—ë–º—ã —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ —Ü–µ–Ω–æ–≤—ã–º —É—Ä–æ–≤–Ω—è–º\n‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –º–µ–º–ø—É–ª–µ",
        inline=False
    )
    
    embed.add_field(
        name="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:",
        value="‚Ä¢ `911957:2229`\n‚Ä¢ `https://app.radfi.co/virtual-mint/911957:2229`",
        inline=False
    )
    
    embed.set_footer(text="–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏")
    embed.timestamp = datetime.utcnow()
    
    await ctx.reply(embed=embed)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.run(BOT_TOKEN)